import SwiftUI

/// Êñ∞„Åó„ÅÑ„Éó„É¨„Ç§„É§„Éº„ÇíËøΩÂä†„Åô„Çã„Ç∑„Éº„Éà„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà
public struct AddPlayerSheet: View {
    @Binding public var isPresented: Bool
    private let onSave: (String) -> Void
    private let onCancel: () -> Void
    
    @State private var playerName: String = ""
    @State private var showNameEmptyAlert = false
    
    public init(
        isPresented: Binding<Bool>,
        onSave: @escaping (String) -> Void,
        onCancel: @escaping () -> Void
    ) {
        AppLogger.shared.debug("AddPlayerSheetÂàùÊúüÂåñ")
        self._isPresented = isPresented
        self.onSave = onSave
        self.onCancel = onCancel
    }
    
    public var body: some View {
        NavigationView {
            ZStack {
                ChildFriendlyBackground(animationSpeed: 0.3)
                
                VStack(spacing: 40) {
                    VStack(spacing: 20) {
                        Text("‚ú® „ÅÇ„Åü„Çâ„Åó„ÅÑ „Éó„É¨„Ç§„É§„Éº")
                            .font(.title)
                            .fontWeight(.bold)
                            .multilineTextAlignment(.center)
                        
                        Text("„Å™„Åæ„Åà„Çí „ÅÑ„Çå„Å¶„Å≠")
                            .font(.title3)
                            .foregroundColor(.secondary)
                    }
                    
                    VStack(spacing: 24) {
                        // ÂêçÂâçÂÖ•Âäõ„Éï„Ç£„Éº„É´„Éâ
                        VStack(alignment: .leading, spacing: 8) {
                            Text("„Å™„Åæ„Åà")
                                .font(.headline)
                                .foregroundColor(.primary)
                            
                            TextField("„Åü„Çç„ÅÜ„Åè„Çì", text: $playerName)
                                .font(.title2)
                                .padding()
                                .background(
                                    RoundedRectangle(cornerRadius: 15)
                                        .fill(Color.white)
                                        .shadow(color: .black.opacity(0.1), radius: 4, x: 0, y: 2)
                                )
                                .textFieldStyle(PlainTextFieldStyle())
                        }
                        
                        // „Éó„É¨„Éì„É•„Éº„Ç¢„Éê„Çø„Éº
                        if !playerName.isEmpty {
                            VStack(spacing: 8) {
                                Text("„Éó„É¨„Éì„É•„Éº")
                                    .font(.caption)
                                    .foregroundColor(.secondary)
                                
                                PlayerAvatarView(
                                    playerName: playerName,
                                    imageData: nil,
                                    size: 100
                                )
                            }
                        }
                    }
                    
                    Spacer()
                    
                    // „Éú„Çø„É≥
                    HStack(spacing: 16) {
                        ChildFriendlyButton(
                            title: "„Ç≠„É£„É≥„Çª„É´",
                            backgroundColor: .gray,
                            foregroundColor: .white
                        ) {
                            AppLogger.shared.info("„Éó„É¨„Ç§„É§„ÉºËøΩÂä†„Çí„Ç≠„É£„É≥„Çª„É´")
                            onCancel()
                        }
                        
                        ChildFriendlyButton(
                            title: "üéâ „Å®„ÅÜ„Çç„Åè",
                            backgroundColor: .green,
                            foregroundColor: .white
                        ) {
                            savePlayer()
                        }
                    }
                    .padding(.horizontal)
                }
                .padding()
            }
            .navigationTitle("")
#if os(iOS)
            .navigationBarHidden(true)
#endif
        }
        .alert("„Å™„Åæ„Åà„Çí „ÅÑ„Çå„Å¶„Å≠", isPresented: $showNameEmptyAlert) {
            Button("OK") { }
        } message: {
            Text("„Éó„É¨„Ç§„É§„Éº„ÅÆ „Å™„Åæ„Åà„Çí „Å´„ÇÖ„ÅÜ„Çä„Çá„Åè „Åó„Å¶„Åè„Å†„Åï„ÅÑ")
        }
    }
    
    private func savePlayer() {
        let trimmedName = playerName.trimmingCharacters(in: .whitespacesAndNewlines)
        
        if trimmedName.isEmpty {
            AppLogger.shared.warning("Á©∫„ÅÆ„Éó„É¨„Ç§„É§„ÉºÂêç„Åß„ÅÆÁôªÈå≤„ÇíË©¶Ë°å")
            showNameEmptyAlert = true
            return
        }
        
        AppLogger.shared.info("Êñ∞„Åó„ÅÑ„Éó„É¨„Ç§„É§„Éº„Çí‰øùÂ≠ò: \(trimmedName)")
        onSave(trimmedName)
    }
}