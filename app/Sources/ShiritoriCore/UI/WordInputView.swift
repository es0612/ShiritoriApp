import SwiftUI
#if canImport(UIKit)
import UIKit
#endif

/// ÂçòË™ûÂÖ•Âäõ„Ç≥„É≥„Éù„Éº„Éç„É≥„ÉàÔºàUIË°®Á§∫Â∞ÇÁî®Ôºâ
/// „Éì„Ç∏„Éç„Çπ„É≠„Ç∏„ÉÉ„ÇØ„ÅØSpeechRecognitionController„Å®InputValidationManager„Å´ÂàÜÈõ¢Ê∏à„Åø
public struct WordInputView: View {
    public let isEnabled: Bool
    public let currentPlayerId: String  // „Éó„É¨„Ç§„É§„ÉºÂàá„ÇäÊõø„ÅàÁõ£Ë¶ñÁî®
    private let onSubmit: (String) -> Void
    
    @State private var inputText = ""
    @FocusState private var isTextFieldFocused: Bool
    
    // üéØ Êñ∞„Åó„ÅÑ„Ç¢„Éº„Ç≠„ÉÜ„ÇØ„ÉÅ„É£ÔºöË≤¨ÂãôÂàÜÈõ¢Ê∏à„Åø„ÅÆ„Ç≥„É≥„Éà„É≠„Éº„É©„Éº
    @State private var speechController = SpeechRecognitionController()
    @State private var validationManager = InputValidationManager()
    
    public init(
        isEnabled: Bool,
        currentPlayerId: String,
        onSubmit: @escaping (String) -> Void
    ) {
        AppLogger.shared.debug("WordInputViewÂàùÊúüÂåñ: enabled=\(isEnabled), playerId=\(currentPlayerId)")
        self.isEnabled = isEnabled
        self.currentPlayerId = currentPlayerId
        self.onSubmit = onSubmit
    }
    
    public var body: some View {
        VStack(spacing: DesignSystem.Spacing.standard) {
            // „Éó„É≠„Ç∞„É¨„ÉÉ„Ç∑„Éñ„Ç¨„Ç§„ÉÄ„É≥„Çπ„É°„ÉÉ„Çª„Éº„Ç∏Ë°®Á§∫
            if speechController.showGuidanceMessage && !speechController.guidanceMessage.isEmpty {
                VStack(spacing: 8) {
                    HStack(spacing: 12) {
                        // „Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥‰ªò„Åç„Ç¢„Ç§„Ç≥„É≥
                        Image(systemName: speechController.getGuidanceIcon())
                            .font(.title2)
                            .foregroundColor(speechController.getGuidanceColor())
                            .scaleEffect(speechController.showGuidanceMessage ? 1.1 : 1.0)
                            .animation(.easeInOut(duration: 0.5).repeatCount(3, autoreverses: true), value: speechController.showGuidanceMessage)
                        
                        VStack(alignment: .leading, spacing: 4) {
                            Text(speechController.getGuidanceTitle())
                                .font(.caption)
                                .fontWeight(.bold)
                                .foregroundColor(speechController.getGuidanceColor())
                            
                            Text(speechController.guidanceMessage)
                                .font(.caption)
                                .fontWeight(.medium)
                                .foregroundColor(.primary)
                                .multilineTextAlignment(.leading)
                        }
                        
                        Spacer()
                    }
                    
                    // Â§±ÊïóÈÄ≤Êçó„Ç§„É≥„Ç∏„Ç±„Éº„Çø„ÉºÔºà3ÂõûÂ§±ÊïóÊôÇ„ÅØÈùûË°®Á§∫Ôºâ
                    if speechController.consecutiveFailureCount < 3 {
                        HStack(spacing: 4) {
                            ForEach(1...3, id: \.self) { index in
                                Circle()
                                    .fill(index <= speechController.consecutiveFailureCount ? speechController.getGuidanceColor() : Color.gray.opacity(0.3))
                                    .frame(width: 8, height: 8)
                                    .scaleEffect(index == speechController.consecutiveFailureCount ? 1.2 : 1.0)
                                    .animation(.easeInOut(duration: 0.3), value: speechController.consecutiveFailureCount)
                            }
                        }
                    }
                }
                .padding(.horizontal, DesignSystem.Spacing.standard)
                .padding(.vertical, DesignSystem.Spacing.mediumSmall)
                .background(
                    RoundedRectangle(cornerRadius: 16)
                        .fill(GameUIHelpers.backgroundColorForCurrentPlatform)
                        .shadow(color: speechController.getGuidanceColor().opacity(0.2), radius: 8, x: 0, y: 4)
                        .overlay(
                            RoundedRectangle(cornerRadius: 16)
                                .stroke(speechController.getGuidanceColor().opacity(0.3), lineWidth: 2)
                        )
                )
                .transition(.asymmetric(
                    insertion: .opacity.combined(with: .scale(scale: 0.8)).combined(with: .offset(y: -20)),
                    removal: .opacity.combined(with: .scale(scale: 0.9))
                ))
                .animation(.spring(response: 0.6, dampingFraction: 0.8), value: speechController.showGuidanceMessage)
            }
            
            // ÂÖ•Âäõ„É¢„Éº„ÉâÂàáÊõøÔºàÈü≥Â£∞ÂÖ•Âäõ„ÇíÂÑ™ÂÖàÁöÑ„Å´Ë°®Á§∫Ôºâ
            HStack(spacing: DesignSystem.Spacing.mediumLarge) {
                // Èü≥Â£∞ÂÖ•Âäõ„Éú„Çø„É≥ÔºàÂ∑¶ÂÅ¥„Å´ÈÖçÁΩÆ„Åó„Å¶ÂÑ™ÂÖàÂ∫¶„ÇíÈ´ò„ÇÅ„ÇãÔºâ
                Button(action: {
                    speechController.switchToVoiceMode()
                    isTextFieldFocused = false
                }) {
                    HStack {
                        Image(systemName: "mic.fill")
                        Text("„Åä„Çì„Åõ„ÅÑ")
                    }
                    .font(.caption)
                    .fontWeight(speechController.isVoiceMode ? .bold : .regular)
                    .padding(.horizontal, DesignSystem.Spacing.standard)
                    .padding(.vertical, DesignSystem.Spacing.small)
                    .background(speechController.isVoiceMode ? Color.red : Color.gray.opacity(0.3))
                    .foregroundColor(speechController.isVoiceMode ? .white : .gray)
                    .cornerRadius(20)
                    .scaleEffect(speechController.isVoiceMode ? 1.05 : 1.0)
                    .animation(.easeInOut(duration: 0.2), value: speechController.isVoiceMode)
                }
                .disabled(!isEnabled)
                
                // „Ç≠„Éº„Éú„Éº„ÉâÂÖ•Âäõ„Éú„Çø„É≥ÔºàÂè≥ÂÅ¥„Å´ÈÖçÁΩÆÔºâ
                Button(action: {
                    speechController.switchToKeyboardMode()
                    isTextFieldFocused = true
                }) {
                    HStack {
                        Image(systemName: "keyboard")
                        Text("„Ç≠„Éº„Éú„Éº„Éâ")
                    }
                    .font(.caption)
                    .fontWeight(speechController.isVoiceMode ? .regular : .bold)
                    .padding(.horizontal, DesignSystem.Spacing.mediumSmall)
                    .padding(.vertical, DesignSystem.Spacing.tiny)
                    .background(speechController.isVoiceMode ? Color.gray.opacity(0.3) : Color.blue)
                    .foregroundColor(speechController.isVoiceMode ? .gray : .white)
                    .cornerRadius(20)
                    .scaleEffect(speechController.isVoiceMode ? 1.0 : 1.05)
                    .animation(.easeInOut(duration: 0.2), value: speechController.isVoiceMode)
                }
                .disabled(!isEnabled)
            }
            
            if speechController.isVoiceMode {
                if speechController.showRecognitionChoice {
                    // üéØ Ë™çË≠òÁµêÊûúÁ¢∫Ë™çUIÔºàËá™ÂãïË°®Á§∫Ôºâ
                    RecognitionResultView(
                        recognizedText: speechController.recognitionResult,
                        onUseWord: {
                            AppLogger.shared.info("Ë™çË≠òÁµêÊûú„ÇíÊé°Áî®: \(speechController.recognitionResult)")
                            useRecognitionResult()
                        },
                        onRetry: {
                            AppLogger.shared.info("Èü≥Â£∞Ë™çË≠ò„Çí„ÇÑ„ÇäÁõ¥„Åó")
                            retryVoiceRecognition()
                        }
                    )
                } else {
                    // Èü≥Â£∞ÂÖ•ÂäõUI
                    VStack(spacing: 8) {
                        ZStack {
                            // Â§±ÊïóÊôÇ„ÅÆ„Ç∑„Çß„Ç§„ÇØ„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥ËÉåÊôØ
                            if speechController.consecutiveFailureCount > 0 && speechController.consecutiveFailureCount < 3 {
                                Circle()
                                    .stroke(speechController.getGuidanceColor().opacity(0.3), lineWidth: 3)
                                    .frame(width: 120, height: 120)
                                    .scaleEffect(1.0 + (0.1 * Double(speechController.consecutiveFailureCount)))
                                    .animation(.easeInOut(duration: 0.5).repeatCount(2, autoreverses: true), value: speechController.consecutiveFailureCount)
                            }
                            
                            MicrophoneButton(
                                speechState: speechController.speechState,
                                size: 100,
                                onTouchDown: {
                                    startVoiceRecording()
                                },
                                onTouchUp: {
                                    stopVoiceRecording()
                                }
                            )
                            .scaleEffect(speechController.currentPhase.isActive ? 1.1 : 1.0)
                            .animation(.easeInOut(duration: 0.2), value: speechController.currentPhase.isActive)
                            
                            // Â§±Êïó„Ç´„Ç¶„É≥„Çø„ÉºË°®Á§∫Ôºà„Éê„ÉÉ„Ç∏È¢®Ôºâ
                            if speechController.consecutiveFailureCount > 0 && speechController.consecutiveFailureCount < 3 {
                                VStack {
                                    HStack {
                                        Spacer()
                                        Circle()
                                            .fill(speechController.getGuidanceColor())
                                            .frame(width: 24, height: 24)
                                            .overlay(
                                                Text("\(speechController.consecutiveFailureCount)")
                                                    .font(.caption2)
                                                    .fontWeight(.bold)
                                                    .foregroundColor(.white)
                                            )
                                            .offset(x: 10, y: -10)
                                            .transition(.scale.combined(with: .opacity))
                                            .animation(.spring(response: 0.4, dampingFraction: 0.6), value: speechController.consecutiveFailureCount)
                                    }
                                    Spacer()
                                }
                                .frame(width: 100, height: 100)
                            }
                        }
                        
                        // üéØ Áä∂ÊÖã„Å´Âü∫„Å•„ÅèË°®Á§∫„É°„ÉÉ„Çª„Éº„Ç∏
                        VStack(spacing: 4) {
                            switch speechController.currentPhase {
                            case .idle:
                                Text("„Éû„Ç§„ÇØ„Çí „Åä„Åó„Å™„Åå„Çâ „ÅØ„Å™„Åó„Å¶„Å≠")
                                    .font(.caption)
                                    .fontWeight(.medium)
                                    .foregroundColor(.secondary)
                                    .multilineTextAlignment(.center)
                            
                            case .recording:
                                Text("„Åç„ÅÑ„Å¶„ÅÑ„Åæ„Åô...")
                                    .font(.caption)
                                    .fontWeight(.medium)
                                    .foregroundColor(.red)
                                    .multilineTextAlignment(.center)
                            
                            case .processing:
                                VStack(spacing: 2) {
                                    Text("„Åã„Çì„Åå„Åà„Å¶„ÅÑ„Åæ„Åô...")
                                        .font(.caption2)
                                        .foregroundColor(.blue)
                                        .opacity(0.8)
                                    
                                    if !speechController.partialResult.isEmpty {
                                        Text("„Äé\(speechController.partialResult)„Äè„Åå „Åç„Åì„Åà„Çã„Åã„Å™Ôºü")
                                            .font(.caption)
                                            .fontWeight(.medium)
                                            .foregroundColor(.blue)
                                            .padding(.horizontal, DesignSystem.Spacing.small)
                                            .padding(.vertical, DesignSystem.Spacing.extraSmall)
                                            .background(
                                                RoundedRectangle(cornerRadius: 8)
                                                    .fill(Color.blue.opacity(0.1))
                                            )
                                    }
                                }
                                
                            case .resultReady:
                                // üéØ Ë™çË≠òÁµêÊûúË°®Á§∫„Éï„Çß„Éº„Ç∫ÔºàËá™ÂãïÈÅ∑ÁßªÂâç„ÅÆÁü≠ÊúüÈñìË°®Á§∫Ôºâ
                                HStack(spacing: 8) {
                                    Image(systemName: "checkmark.circle.fill")
                                        .font(.title2)
                                        .foregroundColor(.green)
                                        .scaleEffect(1.2)
                                    
                                    Text("„Äé\(speechController.recognitionResult)„Äè„Åå „Åç„Åì„Åà„Åæ„Åó„ÅüÔºÅ")
                                        .font(.callout)
                                        .fontWeight(.bold)
                                        .foregroundColor(.green)
                                }
                                .padding(.horizontal, DesignSystem.Spacing.standard)
                                .padding(.vertical, DesignSystem.Spacing.small)
                                .background(
                                    RoundedRectangle(cornerRadius: 16)
                                        .fill(
                                            LinearGradient(
                                                colors: [Color.green.opacity(0.15), Color.mint.opacity(0.1)],
                                                startPoint: .leading,
                                                endPoint: .trailing
                                            )
                                        )
                                        .stroke(Color.green.opacity(0.4), lineWidth: 2)
                                        .shadow(color: .green.opacity(0.2), radius: 4, x: 0, y: 2)
                                )
                                .multilineTextAlignment(.center)
                                .transition(.asymmetric(
                                    insertion: .scale(scale: 0.8).combined(with: .opacity).combined(with: .offset(y: -10)),
                                    removal: .scale(scale: 1.1).combined(with: .opacity).combined(with: .offset(y: 10))
                                ))
                                .animation(.spring(response: 0.4, dampingFraction: 0.7), value: speechController.recognitionResult)
                                
                            case .choiceDisplayed, .completed, .failed:
                                EmptyView()
                            }
                        }
                    }
                    .frame(minHeight: 140, maxHeight: 160)
                    .frame(maxWidth: .infinity)
                }
            } else {
                // „ÉÜ„Ç≠„Çπ„ÉàÂÖ•ÂäõUI
                VStack(spacing: 12) {
                    HStack {
                        TextField("„Åì„Å®„Å∞„Çí „ÅÑ„Çå„Å¶„Å≠", text: $inputText)
                            .font(.title2)
                            .padding(DesignSystem.Spacing.standard)
                            .background(
                                RoundedRectangle(cornerRadius: 12)
                                    .fill(GameUIHelpers.backgroundColorForCurrentPlatform)
                                    .stroke(isEnabled ? Color.blue : Color.gray, lineWidth: 2)
                            )
                            .focused($isTextFieldFocused)
                            .disabled(!isEnabled)
                            .onSubmit {
                                submitWord()
                            }
                        
                        Button(action: {
                            guard canSubmit else { return }
                            submitWord()
                        }) {
                            Text("üÜó")
                                .font(.title2)
                                .fontWeight(.bold)
                                .foregroundColor(.white)
                                .frame(width: 60, height: 60)
                                .background(canSubmit ? Color.green : Color.gray)
                                .cornerRadius(30)
                        }
                        .disabled(!canSubmit)
                    }
                    
                    Text("„Åï„ÅÑ„Åî„ÅÆ „ÇÇ„Åò„Åã„Çâ „ÅØ„Åò„Åæ„Çã „Åì„Å®„Å∞„Çí „ÅÑ„Çå„Å¶„Å≠")
                        .font(.caption)
                        .foregroundColor(.gray)
                        .multilineTextAlignment(.center)
                }
                .frame(minHeight: 120, maxHeight: 140)
            }
        }
        .padding(DesignSystem.Spacing.standard)
        .background(
            RoundedRectangle(cornerRadius: 16)
                .fill(Color.blue.opacity(0.1))
                .stroke(Color.blue.opacity(0.3), lineWidth: 1)
        )
        .opacity(isEnabled ? 1.0 : 0.6)
        .onAppear {
            speechController.initializeInputMode()
        }
        // „Éó„É¨„Ç§„É§„ÉºÂ§âÊõ¥ÊôÇ„ÅÆËá™Âãï„É™„Çª„ÉÉ„ÉàÂá¶ÁêÜ
        .onChange(of: currentPlayerId) { _, newPlayerId in
            AppLogger.shared.info("„Éó„É¨„Ç§„É§„ÉºÂàá„ÇäÊõø„ÅàÊ§úÂá∫: \(newPlayerId) - Èü≥Â£∞Ë™çË≠òÁä∂ÊÖã„Çí„É™„Çª„ÉÉ„Éà")
            
            // ÂÆåÂÖ®„Å™„É™„Çª„ÉÉ„ÉàÂá¶ÁêÜ
            speechController.resetForNewTurn(playerId: newPlayerId)
            inputText = ""
            isTextFieldFocused = false
        }
    }
    
    private var canSubmit: Bool {
        isEnabled && !inputText.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty
    }
    
    private func submitWord() {
        let validationResult = validationManager.validateForSubmission(inputText)
        
        switch validationResult {
        case .valid(let processedWord, _):
            AppLogger.shared.info("ÂçòË™ûÊèêÂá∫: '\(processedWord)'")
            onSubmit(processedWord)
            inputText = ""
            
        case .empty(let reason), .invalid(let reason):
            AppLogger.shared.warning("ÂÖ•ÂäõÊ§úË®ºÂ§±Êïó: \(reason)")
            // „Ç®„É©„ÉºË°®Á§∫„ÅØÂëº„Å≥Âá∫„ÅóÂÖÉ„ÅßÂá¶ÁêÜ
            inputText = ""
        }
    }
    
    // MARK: - Voice Recognition Methods
    
    private func startVoiceRecording() {
        guard isEnabled else { return }
        
        if speechController.startVoiceRecording() {
            inputText = ""
        }
    }
    
    private func stopVoiceRecording() {
        if let result = speechController.stopVoiceRecording() {
            inputText = result
        }
    }
    
    /// Ë™çË≠òÁµêÊûú„ÇíÊé°Áî®„Åó„Å¶ÊèêÂá∫
    private func useRecognitionResult() {
        let result = speechController.useRecognitionResult()
        inputText = result
        submitWord()
    }
    
    /// Èü≥Â£∞Ë™çË≠ò„Çí„ÇÑ„ÇäÁõ¥„Åô
    private func retryVoiceRecognition() {
        speechController.retryVoiceRecognition()
        inputText = ""
    }
}

/// Èü≥Â£∞Ë™çË≠òÁµêÊûúÁ¢∫Ë™ç„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà
private struct RecognitionResultView: View {
    let recognizedText: String
    let onUseWord: () -> Void
    let onRetry: () -> Void
    
    var body: some View {
        VStack(spacing: DesignSystem.Spacing.standard) {
            // „Ç¨„Ç§„Éâ„É°„ÉÉ„Çª„Éº„Ç∏
            Text("„Åì„ÅÆ „Åì„Å®„Å∞„Åß „ÅÑ„ÅÑ„Åã„Å™Ôºü")
                .font(.title3)
                .fontWeight(.medium)
                .foregroundColor(.primary)
                .multilineTextAlignment(.center)
            
            // Ë™çË≠òÁµêÊûú„ÇíÂ§ß„Åç„ÅèË°®Á§∫
            VStack(spacing: 8) {
                Text(recognizedText)
                    .font(.system(size: 28, weight: .bold, design: .rounded))
                    .foregroundColor(.blue)
                    .padding(.horizontal, DesignSystem.Spacing.standard)
                    .padding(.vertical, DesignSystem.Spacing.small)
                    .background(
                        RoundedRectangle(cornerRadius: 14)
                            .fill(Color.blue.opacity(0.1))
                            .stroke(Color.blue.opacity(0.3), lineWidth: 2)
                    )
                    .multilineTextAlignment(.center)
                    .lineLimit(2) // Èï∑„ÅÑ„ÉÜ„Ç≠„Çπ„Éà„Åß„ÇÇË¶ãÂàá„Çå„Å™„ÅÑ„Çà„ÅÜ„Å´Âà∂Èôê
                
                Text("„Å´„Çì„Åó„Åç „Åï„Çå„Åü „Åì„Å®„Å∞")
                    .font(.caption)
                    .foregroundColor(.secondary)
            }
            
            // ÈÅ∏Êäû„Éú„Çø„É≥Ôºà„Ç≥„É≥„Éë„ÇØ„Éà„Å´Ë™øÊï¥Ôºâ
            HStack(spacing: 12) {
                // „ÇÑ„ÇäÁõ¥„Åô„Éú„Çø„É≥Ôºà„Çµ„Ç§„Ç∫Ë™øÊï¥Ôºâ
                Button(action: onRetry) {
                    HStack(spacing: 6) {
                        Image(systemName: "arrow.clockwise")
                            .font(.callout)
                        Text("„ÇÑ„Çä„Å™„Åä„Åô")
                            .font(.callout)
                            .fontWeight(.bold)
                    }
                    .foregroundColor(.white)
                    .padding(.horizontal, DesignSystem.Spacing.standard)
                    .padding(.vertical, DesignSystem.Spacing.small)
                    .background(
                        RoundedRectangle(cornerRadius: 20)
                            .fill(Color.orange)
                    )
                    .shadow(color: .orange.opacity(0.3), radius: 3, x: 0, y: 1)
                }
                
                // Êé°Áî®„Éú„Çø„É≥Ôºà„Çµ„Ç§„Ç∫Ë™øÊï¥Ôºâ
                Button(action: onUseWord) {
                    HStack(spacing: 6) {
                        Image(systemName: "checkmark.circle.fill")
                            .font(.title3)
                        Text("„Å§„Åã„ÅÜ")
                            .font(.callout)
                            .fontWeight(.bold)
                    }
                    .foregroundColor(.white)
                    .padding(.horizontal, DesignSystem.Spacing.mediumLarge)
                    .padding(.vertical, DesignSystem.Spacing.mediumSmall)
                    .background(
                        RoundedRectangle(cornerRadius: 22)
                            .fill(
                                LinearGradient(
                                    colors: [.green, .mint],
                                    startPoint: .leading,
                                    endPoint: .trailing
                                )
                            )
                    )
                    .shadow(color: .green.opacity(0.4), radius: 4, x: 0, y: 2)
                }
                .scaleEffect(1.02) // ËªΩÂæÆ„Å™Âº∑Ë™ø„ÅÆ„Åø
            }
        }
        .frame(minHeight: 160, maxHeight: 200) // È´ò„ÅïÂà∂Èôê„ÇíÁ∑©Âíå
        .frame(maxWidth: .infinity)
        .padding(.horizontal, 16)
        .padding(.vertical, 12)
        .background(
            RoundedRectangle(cornerRadius: 20)
                .fill(Color.primary.opacity(0.05))
                .stroke(Color.primary.opacity(0.1), lineWidth: 1)
        )
        .animation(.spring(response: 0.6, dampingFraction: 0.8), value: recognizedText)
    }
}