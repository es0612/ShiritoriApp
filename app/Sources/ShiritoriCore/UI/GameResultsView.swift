import SwiftUI

/// „Ç≤„Éº„É†ÁµêÊûúÁîªÈù¢
public struct GameResultsView: View {
    public let winner: GameParticipant?
    public let gameData: GameSetupData
    public let usedWords: [String]
    public let gameDuration: Int
    public let eliminationHistory: [(playerId: String, reason: String, order: Int)]
    private let onReturnToTitle: () -> Void
    private let onPlayAgain: () -> Void
    
    @State private var showConfetti = false
    @State private var showStats = false
    
    public init(
        winner: GameParticipant?,
        gameData: GameSetupData,
        usedWords: [String],
        gameDuration: Int,
        eliminationHistory: [(playerId: String, reason: String, order: Int)] = [],
        onReturnToTitle: @escaping () -> Void,
        onPlayAgain: @escaping () -> Void
    ) {
        AppLogger.shared.info("GameResultsViewÂàùÊúüÂåñ: ÂãùËÄÖ=\(winner?.name ?? "„Å™„Åó"), ÂçòË™ûÊï∞=\(usedWords.count), ËÑ±ËêΩÂ±•Ê≠¥=\(eliminationHistory.count)‰ª∂")
        self.winner = winner
        self.gameData = gameData
        self.usedWords = usedWords
        self.gameDuration = gameDuration
        self.eliminationHistory = eliminationHistory
        self.onReturnToTitle = onReturnToTitle
        self.onPlayAgain = onPlayAgain
    }
    
    public var body: some View {
        ZStack {
            // ËÉåÊôØ
            ChildFriendlyBackground(animationSpeed: 0.5)
            
            // Á¥ôÂêπÈõ™„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥
            if showConfetti {
                ConfettiAnimation(isActive: showConfetti)
            }
            
            ScrollView {
                VStack(spacing: 30) {
                    // „Éò„ÉÉ„ÉÄ„Éº
                    resultHeader
                    
                    // ÂãùËÄÖË°®Á§∫
                    winnerDisplay
                    
                    // „Ç≤„Éº„É†Áµ±Ë®à
                    if showStats {
                        gameStatsSection
                    }
                    
                    // ÂçòË™û„Çµ„Éû„É™„Éº
                    wordSummarySection
                    
                    // „Éó„É¨„Ç§„É§„Éº„É©„É≥„Ç≠„É≥„Ç∞
                    playerRankingSection
                    
                    // „Ç¢„ÇØ„Ç∑„Éß„É≥„Éú„Çø„É≥
                    actionButtons
                }
                .padding()
            }
        }
        .onAppear {
            // ÂãùËÄÖ„Åå„ÅÑ„ÇãÂ†¥Âêà„ÅØÁ¥ôÂêπÈõ™„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥ÈñãÂßã
            if winner != nil {
                withAnimation(.easeInOut(duration: 0.5)) {
                    showConfetti = true
                }
            }
            
            // Áµ±Ë®àÊÉÖÂ†±„ÇíÈÅÖÂª∂Ë°®Á§∫
            DispatchQueue.main.asyncAfter(deadline: .now() + 1.0) {
                withAnimation(.easeInOut(duration: 0.8)) {
                    showStats = true
                }
            }
        }
    }
    
    private var resultHeader: some View {
        VStack(spacing: 16) {
            Text("üéâ „Ç≤„Éº„É†ÁµÇ‰∫Ü")
                .font(.largeTitle)
                .fontWeight(.bold)
                .foregroundColor(.primary)
            
            Text("„Åä„Å§„Åã„Çå„Åï„Åæ„Åß„Åó„ÅüÔºÅ")
                .font(.title2)
                .foregroundColor(.gray)
        }
    }
    
    private var winnerDisplay: some View {
        Group {
            if let winner = winner {
                VStack(spacing: 24) {
                    // Â§ß„Åç„Å™ÂãùÂà©„Çø„Ç§„Éà„É´
                    Text("üèÜ „ÇÜ„ÅÜ„Åó„Çá„ÅÜÔºÅ")
                        .font(.system(size: 52, weight: .heavy, design: .rounded))
                        .foregroundStyle(
                            LinearGradient(
                                colors: [.yellow, .orange, .red],
                                startPoint: .topLeading,
                                endPoint: .bottomTrailing
                            )
                        )
                        .shadow(color: .orange.opacity(0.5), radius: 8, x: 0, y: 4)
                        .scaleEffect(showStats ? 1.0 : 0.8)
                        .animation(.spring(response: 0.6, dampingFraction: 0.6), value: showStats)
                    
                    VStack(spacing: 20) {
                        // Â§ß„Åç„Å™„Éó„É¨„Ç§„É§„Éº„Ç¢„Éê„Çø„Éº
                        PlayerAvatarView(
                            playerName: winner.name,
                            imageData: nil,
                            size: 140
                        )
                        .overlay(
                            // ÈáëËâ≤„ÅÆËºù„Åè„É™„É≥„Ç∞
                            Circle()
                                .stroke(
                                    LinearGradient(
                                        colors: [.yellow, .orange, .yellow],
                                        startPoint: .topLeading,
                                        endPoint: .bottomTrailing
                                    ),
                                    lineWidth: 6
                                )
                                .scaleEffect(pulseScale)
                                .animation(.easeInOut(duration: 1.5).repeatForever(autoreverses: true), value: pulseScale)
                        )
                        .shadow(color: .yellow.opacity(0.6), radius: 12, x: 0, y: 6)
                        
                        // ÂãùËÄÖÂêçÔºàÈùûÂ∏∏„Å´Â§ß„Åç„ÅèË°®Á§∫Ôºâ
                        Text(winner.name)
                            .font(.system(size: 42, weight: .bold, design: .rounded))
                            .foregroundStyle(
                                LinearGradient(
                                    colors: [.blue, .purple],
                                    startPoint: .leading,
                                    endPoint: .trailing
                                )
                            )
                            .shadow(color: .blue.opacity(0.3), radius: 4, x: 0, y: 2)
                            .scaleEffect(bounceScale)
                            .animation(.spring(response: 0.8, dampingFraction: 0.5), value: bounceScale)
                        
                        Text(winner.type.displayName)
                            .font(.title2)
                            .fontWeight(.semibold)
                            .foregroundColor(.gray)
                    }
                }
                .padding(32)
                .background(
                    RoundedRectangle(cornerRadius: 24)
                        .fill(
                            RadialGradient(
                                colors: [
                                    Color.yellow.opacity(0.3),
                                    Color.orange.opacity(0.2),
                                    Color.white.opacity(0.9)
                                ],
                                center: .center,
                                startRadius: 50,
                                endRadius: 200
                            )
                        )
                        .stroke(
                            LinearGradient(
                                colors: [.yellow, .orange, .red],
                                startPoint: .topLeading,
                                endPoint: .bottomTrailing
                            ),
                            lineWidth: 4
                        )
                        .shadow(color: .orange.opacity(0.4), radius: 12, x: 0, y: 8)
                )
                .onAppear {
                    withAnimation(.easeInOut(duration: 0.3).delay(0.5)) {
                        bounceScale = 1.1
                    }
                    withAnimation(.easeInOut(duration: 0.3).delay(0.8)) {
                        bounceScale = 1.0
                    }
                    pulseScale = 1.2
                }
            } else {
                VStack(spacing: 20) {
                    Text("ü§ù „Å≤„Åç„Çè„Åë")
                        .font(.system(size: 44, weight: .bold, design: .rounded))
                        .foregroundStyle(
                            LinearGradient(
                                colors: [.blue, .cyan],
                                startPoint: .leading,
                                endPoint: .trailing
                            )
                        )
                        .shadow(color: .blue.opacity(0.3), radius: 6, x: 0, y: 3)
                    
                    Text("„Åø„Çì„Å™ „Çà„Åè„Åå„Çì„Å∞„Çä„Åæ„Åó„ÅüÔºÅ")
                        .font(.title2)
                        .fontWeight(.semibold)
                        .foregroundColor(.gray)
                        .multilineTextAlignment(.center)
                }
                .padding(28)
                .background(
                    RoundedRectangle(cornerRadius: 20)
                        .fill(
                            LinearGradient(
                                colors: [
                                    Color.blue.opacity(0.2),
                                    Color.cyan.opacity(0.1)
                                ],
                                startPoint: .topLeading,
                                endPoint: .bottomTrailing
                            )
                        )
                        .stroke(Color.blue, lineWidth: 3)
                        .shadow(color: .blue.opacity(0.3), radius: 8, x: 0, y: 4)
                )
            }
        }
    }
    
    @State private var pulseScale: CGFloat = 1.0
    @State private var bounceScale: CGFloat = 1.0
    
    private var gameStatsSection: some View {
        VStack(spacing: 16) {
            Text("üìä „Ç≤„Éº„É†„ÅÆ„Åç„Çç„Åè")
                .font(.headline)
                .fontWeight(.bold)
                .foregroundColor(.blue)
            
            GameStatsDisplay(
                totalWords: usedWords.count,
                gameDuration: gameDuration,
                averageWordTime: calculateAverageWordTime()
            )
        }
    }
    
    private var wordSummarySection: some View {
        VStack(spacing: 16) {
            Text("üìù „Å§„Åã„Å£„Åü„Åì„Å®„Å∞")
                .font(.headline)
                .fontWeight(.bold)
                .foregroundColor(.blue)
            
            WordSummaryView(usedWords: usedWords)
        }
    }
    
    private var playerRankingSection: some View {
        VStack(spacing: 16) {
            Text("üèÖ „Éó„É¨„Ç§„É§„Éº„É©„É≥„Ç≠„É≥„Ç∞")
                .font(.headline)
                .fontWeight(.bold)
                .foregroundColor(.blue)
            
            PlayerRankingView(rankings: generateRankings())
        }
    }
    
    private var actionButtons: some View {
        VStack(spacing: 20) {
            // Êìç‰Ωú„Ç¨„Ç§„ÉÄ„É≥„Çπ
            Text("‰∏ã„ÅÆ„Éú„Çø„É≥„ÇíÊäº„Åó„Å¶„Åè„Å†„Åï„ÅÑ")
                .font(.title3)
                .fontWeight(.semibold)
                .foregroundColor(.blue)
                .padding(.bottom, 8)
            
            VStack(spacing: 16) {
                // „ÇÇ„ÅÜ‰∏ÄÂ∫¶„Éó„É¨„Ç§„Éú„Çø„É≥ÔºàÂ§ß„Åç„ÅèÂº∑Ë™øÔºâ
                Button(action: {
                    AppLogger.shared.info("„ÇÇ„ÅÜ‰∏ÄÂ∫¶„Éó„É¨„Ç§„Éú„Çø„É≥„Çø„ÉÉ„Éó")
                    onPlayAgain()
                }) {
                    HStack(spacing: 12) {
                        Image(systemName: "arrow.clockwise.circle.fill")
                            .font(.title2)
                        Text("„ÇÇ„ÅÜ„ÅÑ„Å°„Å© „ÅÇ„Åù„Å∂")
                            .font(.title2)
                            .fontWeight(.bold)
                    }
                    .foregroundColor(.white)
                    .frame(maxWidth: .infinity)
                    .padding(.vertical, 18)
                    .background(
                        LinearGradient(
                            colors: [.green, .mint],
                            startPoint: .leading,
                            endPoint: .trailing
                        )
                    )
                    .clipShape(RoundedRectangle(cornerRadius: 16))
                    .shadow(color: .green.opacity(0.4), radius: 8, x: 0, y: 4)
                }
                .scaleEffect(buttonScale)
                .animation(.spring(response: 0.6, dampingFraction: 0.6), value: buttonScale)
                
                // „Çø„Ç§„Éà„É´„Å´Êàª„Çã„Éú„Çø„É≥ÔºàÁõÆÁ´ã„Å§„Çà„ÅÜ„Å´ÈÖçËâ≤Â§âÊõ¥Ôºâ
                Button(action: {
                    AppLogger.shared.info("„Çø„Ç§„Éà„É´„Å´Êàª„Çã„Éú„Çø„É≥„Çø„ÉÉ„Éó")
                    onReturnToTitle()
                }) {
                    HStack(spacing: 12) {
                        Image(systemName: "house.circle.fill")
                            .font(.title2)
                        Text("„Çø„Ç§„Éà„É´„Å´ „ÇÇ„Å©„Çã")
                            .font(.title2)
                            .fontWeight(.bold)
                    }
                    .foregroundColor(.white)
                    .frame(maxWidth: .infinity)
                    .padding(.vertical, 18)
                    .background(
                        LinearGradient(
                            colors: [.blue, .purple],
                            startPoint: .leading,
                            endPoint: .trailing
                        )
                    )
                    .clipShape(RoundedRectangle(cornerRadius: 16))
                    .shadow(color: .blue.opacity(0.4), radius: 8, x: 0, y: 4)
                }
                .scaleEffect(buttonScale)
                .animation(.spring(response: 0.6, dampingFraction: 0.6).delay(0.1), value: buttonScale)
            }
        }
        .padding(.top, 30)
        .onAppear {
            // „Éú„Çø„É≥„ÅÆ„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥ÂäπÊûú
            withAnimation(.easeInOut(duration: 0.3).delay(1.5)) {
                buttonScale = 1.05
            }
            withAnimation(.easeInOut(duration: 0.3).delay(1.8)) {
                buttonScale = 1.0
            }
        }
    }
    
    @State private var buttonScale: CGFloat = 0.9
    
    private func calculateAverageWordTime() -> Double {
        guard usedWords.count > 0 else { return 0.0 }
        return Double(gameDuration) / Double(usedWords.count)
    }
    
    private func generateRankings() -> [PlayerRanking] {
        var rankings: [PlayerRanking] = []
        
        for (index, participant) in gameData.participants.enumerated() {
            // ÂêÑ„Éó„É¨„Ç§„É§„Éº„ÅÆË≤¢ÁåÆÂçòË™ûÊï∞„ÇíË®àÁÆóÔºàÁ∞°ÊòìÁâàÔºâ
            let wordsCount = max(1, usedWords.count / gameData.participants.count)
            
            // ËÑ±ËêΩÊÉÖÂ†±„ÇíÊ§úÁ¥¢
            let eliminationInfo = eliminationHistory.first { $0.playerId == participant.id }
            let eliminationOrder = eliminationInfo?.order
            let eliminationReason = eliminationInfo?.reason
            
            // ÂãùËÄÖÂà§ÂÆö
            let isWinner = winner?.id == participant.id
            
            // „É©„É≥„ÇØË®àÁÆóÔºöÂãùËÄÖ„Åå1‰Ωç„ÄÅËÑ±ËêΩÈ†Ü„Å´„Çà„Å£„Å¶È†Ü‰Ωç„ÇíÊ±∫ÂÆö
            let rank: Int
            if isWinner {
                rank = 1
            } else if let elimOrder = eliminationOrder {
                // ËÑ±ËêΩÈ†Ü„Å´Âü∫„Å•„ÅÑ„Å¶È†Ü‰ΩçÊ±∫ÂÆöÔºàÊúÄÂæå„Å´ËÑ±ËêΩ„Åó„Åü‰∫∫„ÅåÊúÄÈ´òÈ†Ü‰ΩçÔºâ
                rank = gameData.participants.count - elimOrder + 1
            } else {
                // ËÑ±ËêΩ„Åó„Å¶„ÅÑ„Å™„ÅÑÂ†¥ÂêàÔºàÂºï„ÅçÂàÜ„Åë„Å™„Å©Ôºâ
                rank = index + 1
            }
            
            let ranking = PlayerRanking(
                participant: participant,
                wordsContributed: wordsCount,
                rank: rank,
                eliminationOrder: eliminationOrder,
                eliminationReason: eliminationReason,
                isWinner: isWinner
            )
            
            rankings.append(ranking)
        }
        
        // „É©„É≥„ÇØ„Åß„ÇΩ„Éº„ÉàÔºà1‰Ωç„ÅåÊúÄÂàùÔºâ
        return rankings.sorted { $0.rank < $1.rank }
    }
}